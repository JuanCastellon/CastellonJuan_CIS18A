Abstract classes promote software reusability and decreases programming time because it promotes a template style of coding. If you make a broad and general superclass that many subclasses will fall under, then it is easy to code the same mutual functions once in the abstract class and then reutilize them in all the subsequent derived classes. Abstract classes also promote stabler software because ideally an abstract class is stable and bug-free coding so that the implementation of it in subclasses is smooth and easy. In addition to abstract classes, there also exists interfaces, which are simplified form of abstract classes in which method prototypes are defined but not written for later subclasses to overload them. This is done because interfaces are less resource expensive to use and look up, therefore making them more efficient in the long run, especially if one is implementing this in a large program with many classes.

From my own research on abstract classes and interfaces, I found that abstract classes and interfaces are very similar in what they do and their implementation can make it seem like they almost are the same thing. Abstract classes are an actual class that cannot be instantiated, only subclassed. In addition, abstract classes also can contain methods that can be overridden, just like interfaces. On the other hand, interfaces are not a class, therefore they cannot be subclassed. Instead, a class can interface with the interface and inherit it’s methods that it can override just like the ones in the abstract class. Since an interface is not a class, any unrelated class can use an interface without having to inherit extra junk from an abstract class. The difference is mainly in how the compiler handles look ups. The abstract class’ abstract methods are a much more expensive look up compared to looking up the same method in an interface.
