Inheritance is vital to the software design process because in inheritance is meant to build upon tried and true pre-existing software. Generally, inheritance is very useful in terms of refining or re-prioritizing the superclass, and software design with that in mind is very efficient because having a generalized and stable superclass really promotes this idea of having the superclass being a scalable module in your code, much like how functions promote modular programming in procedural programming. Modular programming in itself is very beneficial because it aids in identifying bugs in processes since everything is so well organized, which is a characteristic that can be fostered in a superclass/subclass relationship.

Protected vs private variables is directly related to inheritance because protected variables, by definition, is a means for the subclass to access member variables of the superclass. In that sense, the subclass is essentially a specialized version of the superclass, since the subclass quite literally has all the aspects of the superclass as well as any enhancements that the subclass has to offer since it will be doing a more refined task as mentioned above. The inherent pros of using protected member variables allows for a greater amount of flexibility of subclasses when it comes to inheriting from a superclass, since it has all the same attributes. However, deriving a subclass that is not meant to know about the superclass’s member variables can get a little more complicated since you no longer have that simple design of having just protected and public attributes. Now you have to take into account that subclass that should not have the necessary privileges so you need to have a private member variable section now to make the division between private and protected variables to all the subclasses. In some cases, it may not even be possible to have such division if the privileges amongst the subclasses vary too wildly to even manage the varying levels of modified member variables.
